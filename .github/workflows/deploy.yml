name: "CI/CD Pipeline (EKS + ECR via OIDC)"

on:
  push:
    branches: ["main"]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: flask-cicd
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # step 0 create a k8 namespace
      - name: Create namespace
        run: kubectl apply -f eks/namespace.yml

      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Configure AWS credentials via OIDC
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::746669235620:role/GitHubActionsRole
          aws-region: ${{ env.AWS_REGION }}

      # Step 3: Verify access
      - name: Test AWS CLI access
        run: aws sts get-caller-identity

      # Step 4: Log in to ECR
      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      # Step 5: Build and push Docker image
      - name: Build and push Docker image
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG ${{ steps.ecr-login.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG
          docker push ${{ steps.ecr-login.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG

      # Step 6: Update kubeconfig for EKS
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name cicd-cluster
          kubectl config view
          kubectl get nodes

      # Step 7: Deploy manifests to EKS
      - name: Deploy to EKS
        run: |
          kubectl set image deployment/flask-app flask-app=${{ steps.ecr-login.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG
          kubectl rollout status deployment/flask-app -n Hardening-namespace


