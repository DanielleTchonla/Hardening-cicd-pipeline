name: "CI/CD Pipeline (EKS + ECR via OIDC)"

on:
  push:
    branches: ["main"]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: flask-cicd
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Configure AWS credentials via OIDC
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::746669235620:role/GitHubActionsRole
          aws-region: ${{ env.AWS_REGION }}

      # Step 3: Verify access
      - name: Test AWS CLI access
        run: aws sts get-caller-identity

      # Step 4: Log in to ECR
      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      # Step 5: Build and push Docker image
      - name: Build and push Docker image
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG ${{ steps.ecr-login.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG
          docker push ${{ steps.ecr-login.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG

      # Step 6: Update kubeconfig for EKS
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name cicd-cluster
          kubectl config view
          kubectl get nodes

      # Step 7: Deploy manifests to EKS
      - name: Deploy to EKS
        run: |
          kubectl set image deployment/flask-deployment flask-container=${{ steps.ecr-login.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG
          kubectl rollout status deployment/flask-deployment


# name: "CI/CD Pipeline (EKS + ECR via OIDC)"

# on:
#   push:
#     branches: ["main"]

# permissions:
#   id-token: write
#   contents: read

# jobs:
#   build-and-deploy:
#     runs-on: ubuntu-latest

#     steps:
#       # Step 1: Checkout code
#       - name: Checkout code
#         uses: actions/checkout@v4

#       # Step 2: Configure AWS credentials via OIDC
#       - name: Configure AWS credentials via OIDC
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           role-to-assume: arn:aws:iam::746669235620:role/GitHubActionsRole
#           aws-region: us-east-1

#       # Step 3: Test AWS CLI access
#       - name: Test OIDC assume role
#         run: |
#           aws sts get-caller-identity

#       # Step 4: Update kubeconfig for EKS
#       - name: Update kubeconfig for EKS
#         run: |
#           aws eks update-kubeconfig --name cicd-cluster --region us-east-1

#       # Step 5: Set up kubectl
#       - name: Set up kubectl
#         uses: azure/setup-kubectl@v3
#         with:
#           version: 'latest'


#  # Step 7: Log in to Amazon ECR
#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v2

#       # Step 8: Build and push Docker image
#       - name: Build, tag, and push Docker image
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           ECR_REPOSITORY: flask-cicd
#           IMAGE_TAG: ${{ github.sha }}
#         run: |
#           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

#       #       # Step 6: Deploy manifests to EKS
#       # - name: Deploy manifests to EKS
#       #   run: |
#       #     kubectl apply -f eks/


#       # Step 9: Update EKS deployment
#       - name: Update Kubernetes deployment
#         run: |
#           aws eks update-kubeconfig --region us-east-1 --name cicd-cluster
#           kubectl set image deployment/flask-cicd flask-cicd=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#           kubectl rollout status deployment/flask-cicd